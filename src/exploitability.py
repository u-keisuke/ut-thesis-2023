def compute_exploitability(
    node, information_sets, average_strategy_profile, opponent_player
):
    """
    exploitability when opponent player chooses best response for current strategy
    """
    if node.terminal:
        return node.eu
    if node.player == opponent_player:  # choose exploitable strategy
        best_response_value = None
        best_weighted_expected_utility = (
            -float("inf") if opponent_player == 0 else float("inf")
        )  # current best value
        for action, _ in node.children.items():
            current_weighted_expected_utility = (
                0  # current value of sum of reach_p * expected_utility
            )
            current_node_expected_utility = 0
            for same_info_node in information_sets[node.player][node.information]:
                expected_utility = compute_exploitability(
                    same_info_node.children[action],
                    information_sets,
                    average_strategy_profile,
                    opponent_player,
                )
                if node == same_info_node:
                    current_node_expected_utility = expected_utility
                current_weighted_expected_utility += (
                    same_info_node.true_pi_mi * expected_utility
                )

            if opponent_player == 0:
                if best_weighted_expected_utility < current_weighted_expected_utility:
                    best_weighted_expected_utility = current_weighted_expected_utility
                    best_response_value = current_node_expected_utility
            else:
                if best_weighted_expected_utility > current_weighted_expected_utility:
                    best_weighted_expected_utility = current_weighted_expected_utility
                    best_response_value = current_node_expected_utility
        return best_response_value

    else:  # use current strategy
        expected_utility = 0
        for action, child_node in node.children.items():
            p = average_strategy_profile[node.player][node.information][action]
            expected_utility += p * compute_exploitability(
                child_node, information_sets, average_strategy_profile, opponent_player
            )
    return expected_utility


def get_exploitability(game, average_strategy_profile):
    best_reponse_0 = compute_exploitability(
        game.root,
        game.information_sets,
        average_strategy_profile,
        opponent_player=0,
    )
    best_reponse_1 = compute_exploitability(
        game.root,
        game.information_sets,
        average_strategy_profile,
        opponent_player=1,
    )

    exploitability = best_reponse_0 + (-1) * best_reponse_1
    exploitability /= game.num_players

    return exploitability, [best_reponse_0, best_reponse_1]
